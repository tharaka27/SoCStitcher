// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AXIvideo2xfMat_HH_
#define _AXIvideo2xfMat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AXIvideo2xfMat : public sc_module {
    // Port declarations 31
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > p_src_TDATA;
    sc_in< sc_logic > p_src_TVALID;
    sc_out< sc_logic > p_src_TREADY;
    sc_in< sc_lv<1> > p_src_TKEEP;
    sc_in< sc_lv<1> > p_src_TSTRB;
    sc_in< sc_lv<1> > p_src_TUSER;
    sc_in< sc_lv<1> > p_src_TLAST;
    sc_in< sc_lv<1> > p_src_TID;
    sc_in< sc_lv<1> > p_src_TDEST;
    sc_in< sc_lv<12> > img_rows_dout;
    sc_in< sc_logic > img_rows_empty_n;
    sc_out< sc_logic > img_rows_read;
    sc_in< sc_lv<12> > img_cols_dout;
    sc_in< sc_logic > img_cols_empty_n;
    sc_out< sc_logic > img_cols_read;
    sc_out< sc_lv<8> > img_data_V_din;
    sc_in< sc_logic > img_data_V_full_n;
    sc_out< sc_logic > img_data_V_write;
    sc_out< sc_lv<12> > img_rows_out_din;
    sc_in< sc_logic > img_rows_out_full_n;
    sc_out< sc_logic > img_rows_out_write;
    sc_out< sc_lv<12> > img_cols_out_din;
    sc_in< sc_logic > img_cols_out_full_n;
    sc_out< sc_logic > img_cols_out_write;


    // Module declarations
    AXIvideo2xfMat(sc_module_name name);
    SC_HAS_PROCESS(AXIvideo2xfMat);

    ~AXIvideo2xfMat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > AXI_video_strm_V_data_V_0_data_out;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_vld_in;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_vld_out;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_ack_in;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_ack_out;
    sc_signal< sc_lv<8> > AXI_video_strm_V_data_V_0_payload_A;
    sc_signal< sc_lv<8> > AXI_video_strm_V_data_V_0_payload_B;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_sel_rd;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_sel_wr;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_sel;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_load_A;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > AXI_video_strm_V_data_V_0_state;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > AXI_video_strm_V_user_V_0_data_out;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_vld_in;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_vld_out;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_ack_in;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_ack_out;
    sc_signal< sc_lv<1> > AXI_video_strm_V_user_V_0_payload_A;
    sc_signal< sc_lv<1> > AXI_video_strm_V_user_V_0_payload_B;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_sel_rd;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_sel_wr;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_sel;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_load_A;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_load_B;
    sc_signal< sc_lv<2> > AXI_video_strm_V_user_V_0_state;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > AXI_video_strm_V_last_V_0_data_out;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_vld_in;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_vld_out;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_ack_in;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_ack_out;
    sc_signal< sc_lv<1> > AXI_video_strm_V_last_V_0_payload_A;
    sc_signal< sc_lv<1> > AXI_video_strm_V_last_V_0_payload_B;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_sel_rd;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_sel_wr;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_sel;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_load_A;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_load_B;
    sc_signal< sc_lv<2> > AXI_video_strm_V_last_V_0_state;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_state_cmp_full;
    sc_signal< sc_logic > AXI_video_strm_V_dest_V_0_vld_in;
    sc_signal< sc_logic > AXI_video_strm_V_dest_V_0_ack_out;
    sc_signal< sc_lv<2> > AXI_video_strm_V_dest_V_0_state;
    sc_signal< sc_logic > p_src_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > tmp_138_i_fu_367_p2;
    sc_signal< sc_lv<1> > brmerge_i_fu_381_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_2_i_phi_fu_322_p4;
    sc_signal< sc_logic > img_rows_blk_n;
    sc_signal< sc_logic > img_cols_blk_n;
    sc_signal< sc_logic > img_data_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<1> > tmp_138_i_reg_431;
    sc_signal< sc_logic > img_rows_out_blk_n;
    sc_signal< sc_logic > img_cols_out_blk_n;
    sc_signal< sc_lv<1> > eol_reg_224;
    sc_signal< sc_lv<8> > axi_data_V_1_i_reg_235;
    sc_signal< sc_lv<1> > eol_i_reg_246;
    sc_signal< sc_lv<11> > j_i_reg_258;
    sc_signal< sc_lv<1> > axi_last_V_2_i_reg_269;
    sc_signal< sc_lv<8> > p_Val2_s_reg_282;
    sc_signal< sc_lv<12> > img_rows_read_reg_392;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<12> > img_cols_read_reg_397;
    sc_signal< sc_lv<8> > tmp_data_V_reg_402;
    sc_signal< sc_lv<1> > tmp_last_V_reg_410;
    sc_signal< sc_lv<1> > tmp_137_i_fu_352_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<11> > i_fu_357_p2;
    sc_signal< sc_lv<11> > i_reg_426;
    sc_signal< bool > ap_predicate_op65_read_state5;
    sc_signal< bool > ap_block_state5_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<11> > j_fu_372_p2;
    sc_signal< bool > ap_block_state8;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state5;
    sc_signal< sc_lv<1> > axi_last_V_3_i_reg_295;
    sc_signal< sc_lv<1> > axi_last_V1_i_reg_193;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > axi_data_V_3_i_reg_307;
    sc_signal< sc_lv<8> > axi_data_V1_i_reg_203;
    sc_signal< sc_lv<11> > i_i_reg_213;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_phi_fu_227_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_axi_data_V_1_i_phi_fu_238_p4;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_i_phi_fu_250_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp1_iter0_axi_last_V_2_i_reg_269;
    sc_signal< sc_lv<8> > ap_phi_reg_pp1_iter0_p_Val2_s_reg_282;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > eol_2_i_reg_319;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<1> > sof_1_i_fu_136;
    sc_signal< sc_lv<12> > i_cast_cast_i_fu_348_p1;
    sc_signal< sc_lv<12> > j_cast_cast_i_fu_363_p1;
    sc_signal< sc_lv<1> > tmp_user_V_fu_339_p1;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< bool > ap_condition_568;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_pp1_stage0;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<8> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<11> ap_const_lv11_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_AXI_video_strm_V_data_V_0_ack_in();
    void thread_AXI_video_strm_V_data_V_0_ack_out();
    void thread_AXI_video_strm_V_data_V_0_data_out();
    void thread_AXI_video_strm_V_data_V_0_load_A();
    void thread_AXI_video_strm_V_data_V_0_load_B();
    void thread_AXI_video_strm_V_data_V_0_sel();
    void thread_AXI_video_strm_V_data_V_0_state_cmp_full();
    void thread_AXI_video_strm_V_data_V_0_vld_in();
    void thread_AXI_video_strm_V_data_V_0_vld_out();
    void thread_AXI_video_strm_V_dest_V_0_ack_out();
    void thread_AXI_video_strm_V_dest_V_0_vld_in();
    void thread_AXI_video_strm_V_last_V_0_ack_in();
    void thread_AXI_video_strm_V_last_V_0_ack_out();
    void thread_AXI_video_strm_V_last_V_0_data_out();
    void thread_AXI_video_strm_V_last_V_0_load_A();
    void thread_AXI_video_strm_V_last_V_0_load_B();
    void thread_AXI_video_strm_V_last_V_0_sel();
    void thread_AXI_video_strm_V_last_V_0_state_cmp_full();
    void thread_AXI_video_strm_V_last_V_0_vld_in();
    void thread_AXI_video_strm_V_last_V_0_vld_out();
    void thread_AXI_video_strm_V_user_V_0_ack_in();
    void thread_AXI_video_strm_V_user_V_0_ack_out();
    void thread_AXI_video_strm_V_user_V_0_data_out();
    void thread_AXI_video_strm_V_user_V_0_load_A();
    void thread_AXI_video_strm_V_user_V_0_load_B();
    void thread_AXI_video_strm_V_user_V_0_sel();
    void thread_AXI_video_strm_V_user_V_0_state_cmp_full();
    void thread_AXI_video_strm_V_user_V_0_vld_in();
    void thread_AXI_video_strm_V_user_V_0_vld_out();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state5_pp1_stage0_iter0();
    void thread_ap_block_state6_pp1_stage0_iter1();
    void thread_ap_block_state8();
    void thread_ap_condition_568();
    void thread_ap_condition_pp1_exit_iter0_state5();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_axi_data_V_1_i_phi_fu_238_p4();
    void thread_ap_phi_mux_eol_2_i_phi_fu_322_p4();
    void thread_ap_phi_mux_eol_i_phi_fu_250_p4();
    void thread_ap_phi_mux_eol_phi_fu_227_p4();
    void thread_ap_phi_reg_pp1_iter0_axi_last_V_2_i_reg_269();
    void thread_ap_phi_reg_pp1_iter0_p_Val2_s_reg_282();
    void thread_ap_predicate_op65_read_state5();
    void thread_ap_ready();
    void thread_brmerge_i_fu_381_p2();
    void thread_i_cast_cast_i_fu_348_p1();
    void thread_i_fu_357_p2();
    void thread_img_cols_blk_n();
    void thread_img_cols_out_blk_n();
    void thread_img_cols_out_din();
    void thread_img_cols_out_write();
    void thread_img_cols_read();
    void thread_img_data_V_blk_n();
    void thread_img_data_V_din();
    void thread_img_data_V_write();
    void thread_img_rows_blk_n();
    void thread_img_rows_out_blk_n();
    void thread_img_rows_out_din();
    void thread_img_rows_out_write();
    void thread_img_rows_read();
    void thread_j_cast_cast_i_fu_363_p1();
    void thread_j_fu_372_p2();
    void thread_p_src_TDATA_blk_n();
    void thread_p_src_TREADY();
    void thread_tmp_137_i_fu_352_p2();
    void thread_tmp_138_i_fu_367_p2();
    void thread_tmp_user_V_fu_339_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
