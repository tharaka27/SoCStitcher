// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "floor.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic floor::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic floor::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> floor::ap_ST_fsm_pp0_stage0 = "1";
const bool floor::ap_const_boolean_1 = true;
const sc_lv<32> floor::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool floor::ap_const_boolean_0 = false;
const sc_lv<32> floor::ap_const_lv32_3F = "111111";
const sc_lv<32> floor::ap_const_lv32_34 = "110100";
const sc_lv<32> floor::ap_const_lv32_3E = "111110";
const sc_lv<32> floor::ap_const_lv32_39 = "111001";
const sc_lv<11> floor::ap_const_lv11_3FF = "1111111111";
const sc_lv<11> floor::ap_const_lv11_433 = "10000110011";
const sc_lv<1> floor::ap_const_lv1_1 = "1";
const sc_lv<52> floor::ap_const_lv52_FFFFFFFFFFFFF = "1111111111111111111111111111111111111111111111111111";
const sc_lv<52> floor::ap_const_lv52_0 = "0000000000000000000000000000000000000000000000000000";
const sc_lv<11> floor::ap_const_lv11_0 = "00000000000";
const sc_lv<63> floor::ap_const_lv63_0 = "000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> floor::ap_const_lv64_BFF0000000000000 = "1011111111110000000000000000000000000000000000000000000000000000";

floor::floor(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mask_table1_U = new floor_mask_table1("mask_table1_U");
    mask_table1_U->clk(ap_clk);
    mask_table1_U->reset(ap_rst);
    mask_table1_U->address0(mask_table1_address0);
    mask_table1_U->ce0(mask_table1_ce0);
    mask_table1_U->q0(mask_table1_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sel_tmp9_i_fu_252_p2 );
    sensitive << ( sel_tmp6_i_fu_236_p3 );

    SC_METHOD(thread_index_V_fu_87_p4);
    sensitive << ( p_Val2_s_fu_61_p1 );

    SC_METHOD(thread_mask_cast_i_fu_116_p1);
    sensitive << ( mask_table1_q0 );

    SC_METHOD(thread_mask_table1_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_3_i_fu_97_p1 );

    SC_METHOD(thread_mask_table1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_notlhs_i_fu_194_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( tmp_V_40_reg_287 );

    SC_METHOD(thread_notrhs_i_fu_199_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( tmp_V_reg_279 );

    SC_METHOD(thread_p_Result_52_fu_204_p3);
    sensitive << ( p_Result_s_reg_270_pp0_iter1_reg );

    SC_METHOD(thread_p_Result_53_fu_120_p3);
    sensitive << ( tmp_77_reg_298 );

    SC_METHOD(thread_p_Result_54_fu_133_p3);
    sensitive << ( p_Val2_39_fu_127_p2 );

    SC_METHOD(thread_p_Result_55_fu_184_p4);
    sensitive << ( xs_sign_V_fu_167_p2 );
    sensitive << ( xs_exp_V_fu_161_p3 );
    sensitive << ( xs_sig_V_fu_178_p2 );

    SC_METHOD(thread_p_Val2_39_fu_127_p2);
    sensitive << ( mask_cast_i_fu_116_p1 );
    sensitive << ( p_Result_53_fu_120_p3 );

    SC_METHOD(thread_p_Val2_s_fu_61_p1);
    sensitive << ( x );

    SC_METHOD(thread_sel_tmp2_demorgan_i_fu_211_p2);
    sensitive << ( tmp_i_reg_303 );
    sensitive << ( tmp_i_55_reg_310 );

    SC_METHOD(thread_sel_tmp3_i_fu_222_p1);
    sensitive << ( sel_tmp3_v_i_fu_215_p3 );

    SC_METHOD(thread_sel_tmp3_v_i_fu_215_p3);
    sensitive << ( p_Result_55_reg_316 );
    sensitive << ( sel_tmp2_demorgan_i_fu_211_p2 );
    sensitive << ( p_Result_52_fu_204_p3 );

    SC_METHOD(thread_sel_tmp4_i_fu_226_p2);
    sensitive << ( tmp_i_reg_303 );

    SC_METHOD(thread_sel_tmp5_i_fu_231_p2);
    sensitive << ( tmp_i_55_reg_310 );
    sensitive << ( sel_tmp4_i_fu_226_p2 );

    SC_METHOD(thread_sel_tmp6_i_fu_236_p3);
    sensitive << ( x_read_reg_265_pp0_iter1_reg );
    sensitive << ( sel_tmp5_i_fu_231_p2 );
    sensitive << ( sel_tmp3_i_fu_222_p1 );

    SC_METHOD(thread_sel_tmp8_i_fu_243_p2);
    sensitive << ( notlhs_i_reg_321 );
    sensitive << ( notrhs_i_reg_326 );

    SC_METHOD(thread_sel_tmp9_i_fu_252_p2);
    sensitive << ( tmp_i_reg_303 );
    sensitive << ( tmp_fu_247_p2 );

    SC_METHOD(thread_tmp_3_i_fu_97_p1);
    sensitive << ( index_V_fu_87_p4 );

    SC_METHOD(thread_tmp_4_i_fu_172_p2);
    sensitive << ( mask_table1_q0 );

    SC_METHOD(thread_tmp_77_fu_102_p1);
    sensitive << ( p_Val2_s_fu_61_p1 );

    SC_METHOD(thread_tmp_V_40_fu_83_p1);
    sensitive << ( p_Val2_s_fu_61_p1 );

    SC_METHOD(thread_tmp_V_41_fu_141_p4);
    sensitive << ( p_Val2_39_fu_127_p2 );

    SC_METHOD(thread_tmp_V_42_fu_151_p1);
    sensitive << ( p_Val2_39_fu_127_p2 );

    SC_METHOD(thread_tmp_fu_247_p2);
    sensitive << ( p_Result_s_reg_270_pp0_iter1_reg );
    sensitive << ( sel_tmp8_i_fu_243_p2 );

    SC_METHOD(thread_tmp_i_55_fu_111_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( tmp_V_reg_279 );

    SC_METHOD(thread_tmp_i_fu_106_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( tmp_V_reg_279 );

    SC_METHOD(thread_xs_exp_V_fu_161_p3);
    sensitive << ( p_Result_s_reg_270 );
    sensitive << ( tmp_V_reg_279 );
    sensitive << ( tmp_V_41_fu_141_p4 );

    SC_METHOD(thread_xs_sig_V_2_fu_155_p3);
    sensitive << ( p_Result_s_reg_270 );
    sensitive << ( tmp_V_40_reg_287 );
    sensitive << ( tmp_V_42_fu_151_p1 );

    SC_METHOD(thread_xs_sig_V_fu_178_p2);
    sensitive << ( xs_sig_V_2_fu_155_p3 );
    sensitive << ( tmp_4_i_fu_172_p2 );

    SC_METHOD(thread_xs_sign_V_fu_167_p2);
    sensitive << ( p_Result_s_reg_270 );
    sensitive << ( p_Result_54_fu_133_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "floor_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, mask_table1_address0, "mask_table1_address0");
    sc_trace(mVcdFile, mask_table1_ce0, "mask_table1_ce0");
    sc_trace(mVcdFile, mask_table1_q0, "mask_table1_q0");
    sc_trace(mVcdFile, x_read_reg_265, "x_read_reg_265");
    sc_trace(mVcdFile, x_read_reg_265_pp0_iter1_reg, "x_read_reg_265_pp0_iter1_reg");
    sc_trace(mVcdFile, p_Result_s_reg_270, "p_Result_s_reg_270");
    sc_trace(mVcdFile, p_Result_s_reg_270_pp0_iter1_reg, "p_Result_s_reg_270_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_V_reg_279, "tmp_V_reg_279");
    sc_trace(mVcdFile, tmp_V_40_fu_83_p1, "tmp_V_40_fu_83_p1");
    sc_trace(mVcdFile, tmp_V_40_reg_287, "tmp_V_40_reg_287");
    sc_trace(mVcdFile, tmp_77_fu_102_p1, "tmp_77_fu_102_p1");
    sc_trace(mVcdFile, tmp_77_reg_298, "tmp_77_reg_298");
    sc_trace(mVcdFile, tmp_i_fu_106_p2, "tmp_i_fu_106_p2");
    sc_trace(mVcdFile, tmp_i_reg_303, "tmp_i_reg_303");
    sc_trace(mVcdFile, tmp_i_55_fu_111_p2, "tmp_i_55_fu_111_p2");
    sc_trace(mVcdFile, tmp_i_55_reg_310, "tmp_i_55_reg_310");
    sc_trace(mVcdFile, p_Result_55_fu_184_p4, "p_Result_55_fu_184_p4");
    sc_trace(mVcdFile, p_Result_55_reg_316, "p_Result_55_reg_316");
    sc_trace(mVcdFile, notlhs_i_fu_194_p2, "notlhs_i_fu_194_p2");
    sc_trace(mVcdFile, notlhs_i_reg_321, "notlhs_i_reg_321");
    sc_trace(mVcdFile, notrhs_i_fu_199_p2, "notrhs_i_fu_199_p2");
    sc_trace(mVcdFile, notrhs_i_reg_326, "notrhs_i_reg_326");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, tmp_3_i_fu_97_p1, "tmp_3_i_fu_97_p1");
    sc_trace(mVcdFile, p_Val2_s_fu_61_p1, "p_Val2_s_fu_61_p1");
    sc_trace(mVcdFile, index_V_fu_87_p4, "index_V_fu_87_p4");
    sc_trace(mVcdFile, mask_cast_i_fu_116_p1, "mask_cast_i_fu_116_p1");
    sc_trace(mVcdFile, p_Result_53_fu_120_p3, "p_Result_53_fu_120_p3");
    sc_trace(mVcdFile, p_Val2_39_fu_127_p2, "p_Val2_39_fu_127_p2");
    sc_trace(mVcdFile, tmp_V_42_fu_151_p1, "tmp_V_42_fu_151_p1");
    sc_trace(mVcdFile, tmp_V_41_fu_141_p4, "tmp_V_41_fu_141_p4");
    sc_trace(mVcdFile, p_Result_54_fu_133_p3, "p_Result_54_fu_133_p3");
    sc_trace(mVcdFile, xs_sig_V_2_fu_155_p3, "xs_sig_V_2_fu_155_p3");
    sc_trace(mVcdFile, tmp_4_i_fu_172_p2, "tmp_4_i_fu_172_p2");
    sc_trace(mVcdFile, xs_sign_V_fu_167_p2, "xs_sign_V_fu_167_p2");
    sc_trace(mVcdFile, xs_exp_V_fu_161_p3, "xs_exp_V_fu_161_p3");
    sc_trace(mVcdFile, xs_sig_V_fu_178_p2, "xs_sig_V_fu_178_p2");
    sc_trace(mVcdFile, sel_tmp2_demorgan_i_fu_211_p2, "sel_tmp2_demorgan_i_fu_211_p2");
    sc_trace(mVcdFile, p_Result_52_fu_204_p3, "p_Result_52_fu_204_p3");
    sc_trace(mVcdFile, sel_tmp3_v_i_fu_215_p3, "sel_tmp3_v_i_fu_215_p3");
    sc_trace(mVcdFile, sel_tmp4_i_fu_226_p2, "sel_tmp4_i_fu_226_p2");
    sc_trace(mVcdFile, sel_tmp5_i_fu_231_p2, "sel_tmp5_i_fu_231_p2");
    sc_trace(mVcdFile, sel_tmp3_i_fu_222_p1, "sel_tmp3_i_fu_222_p1");
    sc_trace(mVcdFile, sel_tmp8_i_fu_243_p2, "sel_tmp8_i_fu_243_p2");
    sc_trace(mVcdFile, tmp_fu_247_p2, "tmp_fu_247_p2");
    sc_trace(mVcdFile, sel_tmp9_i_fu_252_p2, "sel_tmp9_i_fu_252_p2");
    sc_trace(mVcdFile, sel_tmp6_i_fu_236_p3, "sel_tmp6_i_fu_236_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to1, "ap_idle_pp0_0to1");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

floor::~floor() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete mask_table1_U;
}

void floor::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        notlhs_i_reg_321 = notlhs_i_fu_194_p2.read();
        notrhs_i_reg_326 = notrhs_i_fu_199_p2.read();
        p_Result_55_reg_316 = p_Result_55_fu_184_p4.read();
        p_Result_s_reg_270 = p_Val2_s_fu_61_p1.read().range(63, 63);
        p_Result_s_reg_270_pp0_iter1_reg = p_Result_s_reg_270.read();
        tmp_77_reg_298 = tmp_77_fu_102_p1.read();
        tmp_V_40_reg_287 = tmp_V_40_fu_83_p1.read();
        tmp_V_reg_279 = p_Val2_s_fu_61_p1.read().range(62, 52);
        tmp_i_55_reg_310 = tmp_i_55_fu_111_p2.read();
        tmp_i_reg_303 = tmp_i_fu_106_p2.read();
        x_read_reg_265 = x.read();
        x_read_reg_265_pp0_iter1_reg = x_read_reg_265.read();
    }
}

void floor::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void floor::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void floor::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void floor::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0));
}

void floor::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void floor::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void floor::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void floor::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void floor::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void floor::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void floor::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void floor::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void floor::thread_ap_idle_pp0_0to1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0_0to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to1 = ap_const_logic_0;
    }
}

void floor::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void floor::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void floor::thread_ap_return() {
    ap_return = (!sel_tmp9_i_fu_252_p2.read()[0].is_01())? sc_lv<64>(): ((sel_tmp9_i_fu_252_p2.read()[0].to_bool())? ap_const_lv64_BFF0000000000000: sel_tmp6_i_fu_236_p3.read());
}

void floor::thread_index_V_fu_87_p4() {
    index_V_fu_87_p4 = p_Val2_s_fu_61_p1.read().range(57, 52);
}

void floor::thread_mask_cast_i_fu_116_p1() {
    mask_cast_i_fu_116_p1 = esl_zext<64,52>(mask_table1_q0.read());
}

void floor::thread_mask_table1_address0() {
    mask_table1_address0 =  (sc_lv<6>) (tmp_3_i_fu_97_p1.read());
}

void floor::thread_mask_table1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        mask_table1_ce0 = ap_const_logic_1;
    } else {
        mask_table1_ce0 = ap_const_logic_0;
    }
}

void floor::thread_notlhs_i_fu_194_p2() {
    notlhs_i_fu_194_p2 = (!tmp_V_40_reg_287.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_V_40_reg_287.read() != ap_const_lv52_0);
}

void floor::thread_notrhs_i_fu_199_p2() {
    notrhs_i_fu_199_p2 = (!tmp_V_reg_279.read().is_01() || !ap_const_lv11_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_V_reg_279.read() != ap_const_lv11_0);
}

void floor::thread_p_Result_52_fu_204_p3() {
    p_Result_52_fu_204_p3 = esl_concat<1,63>(p_Result_s_reg_270_pp0_iter1_reg.read(), ap_const_lv63_0);
}

void floor::thread_p_Result_53_fu_120_p3() {
    p_Result_53_fu_120_p3 = esl_concat<1,63>(ap_const_lv1_1, tmp_77_reg_298.read());
}

void floor::thread_p_Result_54_fu_133_p3() {
    p_Result_54_fu_133_p3 = p_Val2_39_fu_127_p2.read().range(63, 63);
}

void floor::thread_p_Result_55_fu_184_p4() {
    p_Result_55_fu_184_p4 = esl_concat<12,52>(esl_concat<1,11>(xs_sign_V_fu_167_p2.read(), xs_exp_V_fu_161_p3.read()), xs_sig_V_fu_178_p2.read());
}

void floor::thread_p_Val2_39_fu_127_p2() {
    p_Val2_39_fu_127_p2 = (!mask_cast_i_fu_116_p1.read().is_01() || !p_Result_53_fu_120_p3.read().is_01())? sc_lv<64>(): (sc_biguint<64>(mask_cast_i_fu_116_p1.read()) + sc_biguint<64>(p_Result_53_fu_120_p3.read()));
}

void floor::thread_p_Val2_s_fu_61_p1() {
    p_Val2_s_fu_61_p1 = x.read();
}

void floor::thread_sel_tmp2_demorgan_i_fu_211_p2() {
    sel_tmp2_demorgan_i_fu_211_p2 = (tmp_i_reg_303.read() | tmp_i_55_reg_310.read());
}

void floor::thread_sel_tmp3_i_fu_222_p1() {
    sel_tmp3_i_fu_222_p1 = sel_tmp3_v_i_fu_215_p3.read();
}

void floor::thread_sel_tmp3_v_i_fu_215_p3() {
    sel_tmp3_v_i_fu_215_p3 = (!sel_tmp2_demorgan_i_fu_211_p2.read()[0].is_01())? sc_lv<64>(): ((sel_tmp2_demorgan_i_fu_211_p2.read()[0].to_bool())? p_Result_52_fu_204_p3.read(): p_Result_55_reg_316.read());
}

void floor::thread_sel_tmp4_i_fu_226_p2() {
    sel_tmp4_i_fu_226_p2 = (tmp_i_reg_303.read() ^ ap_const_lv1_1);
}

void floor::thread_sel_tmp5_i_fu_231_p2() {
    sel_tmp5_i_fu_231_p2 = (tmp_i_55_reg_310.read() & sel_tmp4_i_fu_226_p2.read());
}

void floor::thread_sel_tmp6_i_fu_236_p3() {
    sel_tmp6_i_fu_236_p3 = (!sel_tmp5_i_fu_231_p2.read()[0].is_01())? sc_lv<64>(): ((sel_tmp5_i_fu_231_p2.read()[0].to_bool())? x_read_reg_265_pp0_iter1_reg.read(): sel_tmp3_i_fu_222_p1.read());
}

void floor::thread_sel_tmp8_i_fu_243_p2() {
    sel_tmp8_i_fu_243_p2 = (notrhs_i_reg_326.read() | notlhs_i_reg_321.read());
}

void floor::thread_sel_tmp9_i_fu_252_p2() {
    sel_tmp9_i_fu_252_p2 = (tmp_fu_247_p2.read() & tmp_i_reg_303.read());
}

void floor::thread_tmp_3_i_fu_97_p1() {
    tmp_3_i_fu_97_p1 = esl_zext<64,6>(index_V_fu_87_p4.read());
}

void floor::thread_tmp_4_i_fu_172_p2() {
    tmp_4_i_fu_172_p2 = (mask_table1_q0.read() ^ ap_const_lv52_FFFFFFFFFFFFF);
}

void floor::thread_tmp_77_fu_102_p1() {
    tmp_77_fu_102_p1 = p_Val2_s_fu_61_p1.read().range(63-1, 0);
}

void floor::thread_tmp_V_40_fu_83_p1() {
    tmp_V_40_fu_83_p1 = p_Val2_s_fu_61_p1.read().range(52-1, 0);
}

void floor::thread_tmp_V_41_fu_141_p4() {
    tmp_V_41_fu_141_p4 = p_Val2_39_fu_127_p2.read().range(62, 52);
}

void floor::thread_tmp_V_42_fu_151_p1() {
    tmp_V_42_fu_151_p1 = p_Val2_39_fu_127_p2.read().range(52-1, 0);
}

void floor::thread_tmp_fu_247_p2() {
    tmp_fu_247_p2 = (p_Result_s_reg_270_pp0_iter1_reg.read() & sel_tmp8_i_fu_243_p2.read());
}

void floor::thread_tmp_i_55_fu_111_p2() {
    tmp_i_55_fu_111_p2 = (!tmp_V_reg_279.read().is_01() || !ap_const_lv11_433.is_01())? sc_lv<1>(): (sc_biguint<11>(tmp_V_reg_279.read()) > sc_biguint<11>(ap_const_lv11_433));
}

void floor::thread_tmp_i_fu_106_p2() {
    tmp_i_fu_106_p2 = (!tmp_V_reg_279.read().is_01() || !ap_const_lv11_3FF.is_01())? sc_lv<1>(): (sc_biguint<11>(tmp_V_reg_279.read()) < sc_biguint<11>(ap_const_lv11_3FF));
}

void floor::thread_xs_exp_V_fu_161_p3() {
    xs_exp_V_fu_161_p3 = (!p_Result_s_reg_270.read()[0].is_01())? sc_lv<11>(): ((p_Result_s_reg_270.read()[0].to_bool())? tmp_V_41_fu_141_p4.read(): tmp_V_reg_279.read());
}

void floor::thread_xs_sig_V_2_fu_155_p3() {
    xs_sig_V_2_fu_155_p3 = (!p_Result_s_reg_270.read()[0].is_01())? sc_lv<52>(): ((p_Result_s_reg_270.read()[0].to_bool())? tmp_V_42_fu_151_p1.read(): tmp_V_40_reg_287.read());
}

void floor::thread_xs_sig_V_fu_178_p2() {
    xs_sig_V_fu_178_p2 = (xs_sig_V_2_fu_155_p3.read() & tmp_4_i_fu_172_p2.read());
}

void floor::thread_xs_sign_V_fu_167_p2() {
    xs_sign_V_fu_167_p2 = (p_Result_s_reg_270.read() & p_Result_54_fu_133_p3.read());
}

void floor::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

