// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _floor_HH_
#define _floor_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "floor_mask_table1.h"

namespace ap_rtl {

struct floor : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<64> > x;
    sc_out< sc_lv<64> > ap_return;


    // Module declarations
    floor(sc_module_name name);
    SC_HAS_PROCESS(floor);

    ~floor();

    sc_trace_file* mVcdFile;

    floor_mask_table1* mask_table1_U;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > mask_table1_address0;
    sc_signal< sc_logic > mask_table1_ce0;
    sc_signal< sc_lv<52> > mask_table1_q0;
    sc_signal< sc_lv<64> > x_read_reg_265;
    sc_signal< sc_lv<64> > x_read_reg_265_pp0_iter1_reg;
    sc_signal< sc_lv<1> > p_Result_s_reg_270;
    sc_signal< sc_lv<1> > p_Result_s_reg_270_pp0_iter1_reg;
    sc_signal< sc_lv<11> > tmp_V_reg_279;
    sc_signal< sc_lv<52> > tmp_V_40_fu_83_p1;
    sc_signal< sc_lv<52> > tmp_V_40_reg_287;
    sc_signal< sc_lv<63> > tmp_77_fu_102_p1;
    sc_signal< sc_lv<63> > tmp_77_reg_298;
    sc_signal< sc_lv<1> > tmp_i_fu_106_p2;
    sc_signal< sc_lv<1> > tmp_i_reg_303;
    sc_signal< sc_lv<1> > tmp_i_55_fu_111_p2;
    sc_signal< sc_lv<1> > tmp_i_55_reg_310;
    sc_signal< sc_lv<64> > p_Result_55_fu_184_p4;
    sc_signal< sc_lv<64> > p_Result_55_reg_316;
    sc_signal< sc_lv<1> > notlhs_i_fu_194_p2;
    sc_signal< sc_lv<1> > notlhs_i_reg_321;
    sc_signal< sc_lv<1> > notrhs_i_fu_199_p2;
    sc_signal< sc_lv<1> > notrhs_i_reg_326;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > tmp_3_i_fu_97_p1;
    sc_signal< sc_lv<64> > p_Val2_s_fu_61_p1;
    sc_signal< sc_lv<6> > index_V_fu_87_p4;
    sc_signal< sc_lv<64> > mask_cast_i_fu_116_p1;
    sc_signal< sc_lv<64> > p_Result_53_fu_120_p3;
    sc_signal< sc_lv<64> > p_Val2_39_fu_127_p2;
    sc_signal< sc_lv<52> > tmp_V_42_fu_151_p1;
    sc_signal< sc_lv<11> > tmp_V_41_fu_141_p4;
    sc_signal< sc_lv<1> > p_Result_54_fu_133_p3;
    sc_signal< sc_lv<52> > xs_sig_V_2_fu_155_p3;
    sc_signal< sc_lv<52> > tmp_4_i_fu_172_p2;
    sc_signal< sc_lv<1> > xs_sign_V_fu_167_p2;
    sc_signal< sc_lv<11> > xs_exp_V_fu_161_p3;
    sc_signal< sc_lv<52> > xs_sig_V_fu_178_p2;
    sc_signal< sc_lv<1> > sel_tmp2_demorgan_i_fu_211_p2;
    sc_signal< sc_lv<64> > p_Result_52_fu_204_p3;
    sc_signal< sc_lv<64> > sel_tmp3_v_i_fu_215_p3;
    sc_signal< sc_lv<1> > sel_tmp4_i_fu_226_p2;
    sc_signal< sc_lv<1> > sel_tmp5_i_fu_231_p2;
    sc_signal< sc_lv<64> > sel_tmp3_i_fu_222_p1;
    sc_signal< sc_lv<1> > sel_tmp8_i_fu_243_p2;
    sc_signal< sc_lv<1> > tmp_fu_247_p2;
    sc_signal< sc_lv<1> > sel_tmp9_i_fu_252_p2;
    sc_signal< sc_lv<64> > sel_tmp6_i_fu_236_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to1;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_34;
    static const sc_lv<32> ap_const_lv32_3E;
    static const sc_lv<32> ap_const_lv32_39;
    static const sc_lv<11> ap_const_lv11_3FF;
    static const sc_lv<11> ap_const_lv11_433;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<52> ap_const_lv52_FFFFFFFFFFFFF;
    static const sc_lv<52> ap_const_lv52_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<63> ap_const_lv63_0;
    static const sc_lv<64> ap_const_lv64_BFF0000000000000;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return();
    void thread_index_V_fu_87_p4();
    void thread_mask_cast_i_fu_116_p1();
    void thread_mask_table1_address0();
    void thread_mask_table1_ce0();
    void thread_notlhs_i_fu_194_p2();
    void thread_notrhs_i_fu_199_p2();
    void thread_p_Result_52_fu_204_p3();
    void thread_p_Result_53_fu_120_p3();
    void thread_p_Result_54_fu_133_p3();
    void thread_p_Result_55_fu_184_p4();
    void thread_p_Val2_39_fu_127_p2();
    void thread_p_Val2_s_fu_61_p1();
    void thread_sel_tmp2_demorgan_i_fu_211_p2();
    void thread_sel_tmp3_i_fu_222_p1();
    void thread_sel_tmp3_v_i_fu_215_p3();
    void thread_sel_tmp4_i_fu_226_p2();
    void thread_sel_tmp5_i_fu_231_p2();
    void thread_sel_tmp6_i_fu_236_p3();
    void thread_sel_tmp8_i_fu_243_p2();
    void thread_sel_tmp9_i_fu_252_p2();
    void thread_tmp_3_i_fu_97_p1();
    void thread_tmp_4_i_fu_172_p2();
    void thread_tmp_77_fu_102_p1();
    void thread_tmp_V_40_fu_83_p1();
    void thread_tmp_V_41_fu_141_p4();
    void thread_tmp_V_42_fu_151_p1();
    void thread_tmp_fu_247_p2();
    void thread_tmp_i_55_fu_111_p2();
    void thread_tmp_i_fu_106_p2();
    void thread_xs_exp_V_fu_161_p3();
    void thread_xs_sig_V_2_fu_155_p3();
    void thread_xs_sig_V_fu_178_p2();
    void thread_xs_sign_V_fu_167_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
