// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _warpTransform_Loop_1_HH_
#define _warpTransform_Loop_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "warp_stream_accelbkb.h"

namespace ap_rtl {

struct warpTransform_Loop_1 : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > p_src_mat_rows_dout;
    sc_in< sc_logic > p_src_mat_rows_empty_n;
    sc_out< sc_logic > p_src_mat_rows_read;
    sc_in< sc_lv<12> > p_src_mat_cols_load337_loc_dout;
    sc_in< sc_logic > p_src_mat_cols_load337_loc_empty_n;
    sc_out< sc_logic > p_src_mat_cols_load337_loc_read;
    sc_in< sc_lv<8> > p_src_mat_data_V_dout;
    sc_in< sc_logic > p_src_mat_data_V_empty_n;
    sc_out< sc_logic > p_src_mat_data_V_read;
    sc_out< sc_lv<8> > in_stream_V_V_din;
    sc_in< sc_logic > in_stream_V_V_full_n;
    sc_out< sc_logic > in_stream_V_V_write;
    sc_out< sc_lv<12> > p_src_mat_cols_load337_loc_out_din;
    sc_in< sc_logic > p_src_mat_cols_load337_loc_out_full_n;
    sc_out< sc_logic > p_src_mat_cols_load337_loc_out_write;
    sc_out< sc_lv<12> > ap_return;


    // Module declarations
    warpTransform_Loop_1(sc_module_name name);
    SC_HAS_PROCESS(warpTransform_Loop_1);

    ~warpTransform_Loop_1();

    sc_trace_file* mVcdFile;

    warp_stream_accelbkb<1,1,12,12,24>* warp_stream_accelbkb_U27;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > p_src_mat_rows_blk_n;
    sc_signal< sc_logic > p_src_mat_cols_load337_loc_blk_n;
    sc_signal< sc_logic > p_src_mat_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_193;
    sc_signal< sc_logic > in_stream_V_V_blk_n;
    sc_signal< sc_logic > p_src_mat_cols_load337_loc_out_blk_n;
    sc_signal< sc_lv<24> > indvar_flatten_reg_144;
    sc_signal< sc_lv<12> > p_src_mat_rows_read_reg_178;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<12> > p_src_mat_cols_load33_reg_183;
    sc_signal< sc_lv<24> > bound_fu_172_p2;
    sc_signal< sc_lv<24> > bound_reg_188;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_161_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<24> > indvar_flatten_next_fu_166_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<12> > bound_fu_172_p0;
    sc_signal< sc_lv<12> > bound_fu_172_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<24> > bound_fu_172_p00;
    sc_signal< sc_lv<24> > bound_fu_172_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<24> ap_const_lv24_1;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_bound_fu_172_p0();
    void thread_bound_fu_172_p00();
    void thread_bound_fu_172_p1();
    void thread_bound_fu_172_p10();
    void thread_exitcond_flatten_fu_161_p2();
    void thread_in_stream_V_V_blk_n();
    void thread_in_stream_V_V_din();
    void thread_in_stream_V_V_write();
    void thread_indvar_flatten_next_fu_166_p2();
    void thread_p_src_mat_cols_load337_loc_blk_n();
    void thread_p_src_mat_cols_load337_loc_out_blk_n();
    void thread_p_src_mat_cols_load337_loc_out_din();
    void thread_p_src_mat_cols_load337_loc_out_write();
    void thread_p_src_mat_cols_load337_loc_read();
    void thread_p_src_mat_data_V_blk_n();
    void thread_p_src_mat_data_V_read();
    void thread_p_src_mat_rows_blk_n();
    void thread_p_src_mat_rows_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
