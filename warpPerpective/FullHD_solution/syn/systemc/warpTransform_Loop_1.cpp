// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "warpTransform_Loop_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic warpTransform_Loop_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic warpTransform_Loop_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> warpTransform_Loop_1::ap_ST_fsm_state1 = "1";
const sc_lv<4> warpTransform_Loop_1::ap_ST_fsm_state2 = "10";
const sc_lv<4> warpTransform_Loop_1::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> warpTransform_Loop_1::ap_ST_fsm_state5 = "1000";
const sc_lv<32> warpTransform_Loop_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool warpTransform_Loop_1::ap_const_boolean_1 = true;
const sc_lv<32> warpTransform_Loop_1::ap_const_lv32_2 = "10";
const bool warpTransform_Loop_1::ap_const_boolean_0 = false;
const sc_lv<1> warpTransform_Loop_1::ap_const_lv1_0 = "0";
const sc_lv<32> warpTransform_Loop_1::ap_const_lv32_1 = "1";
const sc_lv<1> warpTransform_Loop_1::ap_const_lv1_1 = "1";
const sc_lv<24> warpTransform_Loop_1::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<24> warpTransform_Loop_1::ap_const_lv24_1 = "1";
const sc_lv<32> warpTransform_Loop_1::ap_const_lv32_3 = "11";

warpTransform_Loop_1::warpTransform_Loop_1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    warp_stream_accelbkb_U27 = new warp_stream_accelbkb<1,1,12,12,24>("warp_stream_accelbkb_U27");
    warp_stream_accelbkb_U27->din0(bound_fu_172_p0);
    warp_stream_accelbkb_U27->din1(bound_fu_172_p1);
    warp_stream_accelbkb_U27->dout(bound_fu_172_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( p_src_mat_data_V_empty_n );
    sensitive << ( in_stream_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_193 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( p_src_mat_data_V_empty_n );
    sensitive << ( in_stream_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_193 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( p_src_mat_data_V_empty_n );
    sensitive << ( in_stream_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_193 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( p_src_mat_rows_empty_n );
    sensitive << ( p_src_mat_cols_load337_loc_empty_n );
    sensitive << ( p_src_mat_cols_load337_loc_out_full_n );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( p_src_mat_data_V_empty_n );
    sensitive << ( in_stream_V_V_full_n );
    sensitive << ( exitcond_flatten_reg_193 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( exitcond_flatten_fu_161_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_src_mat_rows_read_reg_178 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_bound_fu_172_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bound_fu_172_p00 );

    SC_METHOD(thread_bound_fu_172_p00);
    sensitive << ( p_src_mat_cols_load33_reg_183 );

    SC_METHOD(thread_bound_fu_172_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bound_fu_172_p10 );

    SC_METHOD(thread_bound_fu_172_p10);
    sensitive << ( p_src_mat_rows_read_reg_178 );

    SC_METHOD(thread_exitcond_flatten_fu_161_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_144 );
    sensitive << ( bound_reg_188 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_in_stream_V_V_blk_n);
    sensitive << ( in_stream_V_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_193 );

    SC_METHOD(thread_in_stream_V_V_din);
    sensitive << ( p_src_mat_data_V_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_193 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_in_stream_V_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_193 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_indvar_flatten_next_fu_166_p2);
    sensitive << ( indvar_flatten_reg_144 );

    SC_METHOD(thread_p_src_mat_cols_load337_loc_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_src_mat_cols_load337_loc_empty_n );

    SC_METHOD(thread_p_src_mat_cols_load337_loc_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_src_mat_cols_load337_loc_out_full_n );

    SC_METHOD(thread_p_src_mat_cols_load337_loc_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_src_mat_rows_empty_n );
    sensitive << ( p_src_mat_cols_load337_loc_dout );
    sensitive << ( p_src_mat_cols_load337_loc_empty_n );
    sensitive << ( p_src_mat_cols_load337_loc_out_full_n );

    SC_METHOD(thread_p_src_mat_cols_load337_loc_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_src_mat_rows_empty_n );
    sensitive << ( p_src_mat_cols_load337_loc_empty_n );
    sensitive << ( p_src_mat_cols_load337_loc_out_full_n );

    SC_METHOD(thread_p_src_mat_cols_load337_loc_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_src_mat_rows_empty_n );
    sensitive << ( p_src_mat_cols_load337_loc_empty_n );
    sensitive << ( p_src_mat_cols_load337_loc_out_full_n );

    SC_METHOD(thread_p_src_mat_data_V_blk_n);
    sensitive << ( p_src_mat_data_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_193 );

    SC_METHOD(thread_p_src_mat_data_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_193 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_p_src_mat_rows_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_src_mat_rows_empty_n );

    SC_METHOD(thread_p_src_mat_rows_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_src_mat_rows_empty_n );
    sensitive << ( p_src_mat_cols_load337_loc_empty_n );
    sensitive << ( p_src_mat_cols_load337_loc_out_full_n );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_src_mat_rows_empty_n );
    sensitive << ( p_src_mat_cols_load337_loc_empty_n );
    sensitive << ( p_src_mat_cols_load337_loc_out_full_n );
    sensitive << ( exitcond_flatten_fu_161_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "warpTransform_Loop_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_src_mat_rows_dout, "(port)p_src_mat_rows_dout");
    sc_trace(mVcdFile, p_src_mat_rows_empty_n, "(port)p_src_mat_rows_empty_n");
    sc_trace(mVcdFile, p_src_mat_rows_read, "(port)p_src_mat_rows_read");
    sc_trace(mVcdFile, p_src_mat_cols_load337_loc_dout, "(port)p_src_mat_cols_load337_loc_dout");
    sc_trace(mVcdFile, p_src_mat_cols_load337_loc_empty_n, "(port)p_src_mat_cols_load337_loc_empty_n");
    sc_trace(mVcdFile, p_src_mat_cols_load337_loc_read, "(port)p_src_mat_cols_load337_loc_read");
    sc_trace(mVcdFile, p_src_mat_data_V_dout, "(port)p_src_mat_data_V_dout");
    sc_trace(mVcdFile, p_src_mat_data_V_empty_n, "(port)p_src_mat_data_V_empty_n");
    sc_trace(mVcdFile, p_src_mat_data_V_read, "(port)p_src_mat_data_V_read");
    sc_trace(mVcdFile, in_stream_V_V_din, "(port)in_stream_V_V_din");
    sc_trace(mVcdFile, in_stream_V_V_full_n, "(port)in_stream_V_V_full_n");
    sc_trace(mVcdFile, in_stream_V_V_write, "(port)in_stream_V_V_write");
    sc_trace(mVcdFile, p_src_mat_cols_load337_loc_out_din, "(port)p_src_mat_cols_load337_loc_out_din");
    sc_trace(mVcdFile, p_src_mat_cols_load337_loc_out_full_n, "(port)p_src_mat_cols_load337_loc_out_full_n");
    sc_trace(mVcdFile, p_src_mat_cols_load337_loc_out_write, "(port)p_src_mat_cols_load337_loc_out_write");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_src_mat_rows_blk_n, "p_src_mat_rows_blk_n");
    sc_trace(mVcdFile, p_src_mat_cols_load337_loc_blk_n, "p_src_mat_cols_load337_loc_blk_n");
    sc_trace(mVcdFile, p_src_mat_data_V_blk_n, "p_src_mat_data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_flatten_reg_193, "exitcond_flatten_reg_193");
    sc_trace(mVcdFile, in_stream_V_V_blk_n, "in_stream_V_V_blk_n");
    sc_trace(mVcdFile, p_src_mat_cols_load337_loc_out_blk_n, "p_src_mat_cols_load337_loc_out_blk_n");
    sc_trace(mVcdFile, indvar_flatten_reg_144, "indvar_flatten_reg_144");
    sc_trace(mVcdFile, p_src_mat_rows_read_reg_178, "p_src_mat_rows_read_reg_178");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, p_src_mat_cols_load33_reg_183, "p_src_mat_cols_load33_reg_183");
    sc_trace(mVcdFile, bound_fu_172_p2, "bound_fu_172_p2");
    sc_trace(mVcdFile, bound_reg_188, "bound_reg_188");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_flatten_fu_161_p2, "exitcond_flatten_fu_161_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, indvar_flatten_next_fu_166_p2, "indvar_flatten_next_fu_166_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, bound_fu_172_p0, "bound_fu_172_p0");
    sc_trace(mVcdFile, bound_fu_172_p1, "bound_fu_172_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, bound_fu_172_p00, "bound_fu_172_p00");
    sc_trace(mVcdFile, bound_fu_172_p10, "bound_fu_172_p10");
#endif

    }
}

warpTransform_Loop_1::~warpTransform_Loop_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete warp_stream_accelbkb_U27;
}

void warpTransform_Loop_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_161_p2.read()))) {
        indvar_flatten_reg_144 = indvar_flatten_next_fu_166_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        indvar_flatten_reg_144 = ap_const_lv24_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        bound_reg_188 = bound_fu_172_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_193 = exitcond_flatten_fu_161_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_rows_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_cols_load337_loc_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_cols_load337_loc_out_full_n.read())))) {
        p_src_mat_cols_load33_reg_183 = p_src_mat_cols_load337_loc_dout.read();
        p_src_mat_rows_read_reg_178 = p_src_mat_rows_dout.read();
    }
}

void warpTransform_Loop_1::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void warpTransform_Loop_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void warpTransform_Loop_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void warpTransform_Loop_1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void warpTransform_Loop_1::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void warpTransform_Loop_1::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_flatten_reg_193.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_data_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_193.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_full_n.read()))));
}

void warpTransform_Loop_1::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_flatten_reg_193.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_data_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_193.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_full_n.read()))));
}

void warpTransform_Loop_1::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_flatten_reg_193.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_data_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_193.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_full_n.read()))));
}

void warpTransform_Loop_1::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_rows_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_cols_load337_loc_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_cols_load337_loc_out_full_n.read()));
}

void warpTransform_Loop_1::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void warpTransform_Loop_1::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(exitcond_flatten_reg_193.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_data_V_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_193.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_full_n.read())));
}

void warpTransform_Loop_1::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_161_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void warpTransform_Loop_1::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void warpTransform_Loop_1::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void warpTransform_Loop_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void warpTransform_Loop_1::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void warpTransform_Loop_1::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void warpTransform_Loop_1::thread_ap_return() {
    ap_return = p_src_mat_rows_read_reg_178.read();
}

void warpTransform_Loop_1::thread_bound_fu_172_p0() {
    bound_fu_172_p0 =  (sc_lv<12>) (bound_fu_172_p00.read());
}

void warpTransform_Loop_1::thread_bound_fu_172_p00() {
    bound_fu_172_p00 = esl_zext<24,12>(p_src_mat_cols_load33_reg_183.read());
}

void warpTransform_Loop_1::thread_bound_fu_172_p1() {
    bound_fu_172_p1 =  (sc_lv<12>) (bound_fu_172_p10.read());
}

void warpTransform_Loop_1::thread_bound_fu_172_p10() {
    bound_fu_172_p10 = esl_zext<24,12>(p_src_mat_rows_read_reg_178.read());
}

void warpTransform_Loop_1::thread_exitcond_flatten_fu_161_p2() {
    exitcond_flatten_fu_161_p2 = (!indvar_flatten_reg_144.read().is_01() || !bound_reg_188.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_144.read() == bound_reg_188.read());
}

void warpTransform_Loop_1::thread_in_stream_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_193.read(), ap_const_lv1_0))) {
        in_stream_V_V_blk_n = in_stream_V_V_full_n.read();
    } else {
        in_stream_V_V_blk_n = ap_const_logic_1;
    }
}

void warpTransform_Loop_1::thread_in_stream_V_V_din() {
    in_stream_V_V_din = p_src_mat_data_V_dout.read();
}

void warpTransform_Loop_1::thread_in_stream_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_193.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_stream_V_V_write = ap_const_logic_1;
    } else {
        in_stream_V_V_write = ap_const_logic_0;
    }
}

void warpTransform_Loop_1::thread_indvar_flatten_next_fu_166_p2() {
    indvar_flatten_next_fu_166_p2 = (!indvar_flatten_reg_144.read().is_01() || !ap_const_lv24_1.is_01())? sc_lv<24>(): (sc_biguint<24>(indvar_flatten_reg_144.read()) + sc_biguint<24>(ap_const_lv24_1));
}

void warpTransform_Loop_1::thread_p_src_mat_cols_load337_loc_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        p_src_mat_cols_load337_loc_blk_n = p_src_mat_cols_load337_loc_empty_n.read();
    } else {
        p_src_mat_cols_load337_loc_blk_n = ap_const_logic_1;
    }
}

void warpTransform_Loop_1::thread_p_src_mat_cols_load337_loc_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        p_src_mat_cols_load337_loc_out_blk_n = p_src_mat_cols_load337_loc_out_full_n.read();
    } else {
        p_src_mat_cols_load337_loc_out_blk_n = ap_const_logic_1;
    }
}

void warpTransform_Loop_1::thread_p_src_mat_cols_load337_loc_out_din() {
    p_src_mat_cols_load337_loc_out_din = p_src_mat_cols_load337_loc_dout.read();
}

void warpTransform_Loop_1::thread_p_src_mat_cols_load337_loc_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_rows_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_cols_load337_loc_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_cols_load337_loc_out_full_n.read())))) {
        p_src_mat_cols_load337_loc_out_write = ap_const_logic_1;
    } else {
        p_src_mat_cols_load337_loc_out_write = ap_const_logic_0;
    }
}

void warpTransform_Loop_1::thread_p_src_mat_cols_load337_loc_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_rows_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_cols_load337_loc_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_cols_load337_loc_out_full_n.read())))) {
        p_src_mat_cols_load337_loc_read = ap_const_logic_1;
    } else {
        p_src_mat_cols_load337_loc_read = ap_const_logic_0;
    }
}

void warpTransform_Loop_1::thread_p_src_mat_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_193.read(), ap_const_lv1_0))) {
        p_src_mat_data_V_blk_n = p_src_mat_data_V_empty_n.read();
    } else {
        p_src_mat_data_V_blk_n = ap_const_logic_1;
    }
}

void warpTransform_Loop_1::thread_p_src_mat_data_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_193.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        p_src_mat_data_V_read = ap_const_logic_1;
    } else {
        p_src_mat_data_V_read = ap_const_logic_0;
    }
}

void warpTransform_Loop_1::thread_p_src_mat_rows_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        p_src_mat_rows_blk_n = p_src_mat_rows_empty_n.read();
    } else {
        p_src_mat_rows_blk_n = ap_const_logic_1;
    }
}

void warpTransform_Loop_1::thread_p_src_mat_rows_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_rows_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_cols_load337_loc_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_cols_load337_loc_out_full_n.read())))) {
        p_src_mat_rows_read = ap_const_logic_1;
    } else {
        p_src_mat_rows_read = ap_const_logic_0;
    }
}

void warpTransform_Loop_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_rows_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_cols_load337_loc_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_src_mat_cols_load337_loc_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_161_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_161_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

