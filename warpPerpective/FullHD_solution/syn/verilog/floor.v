// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module floor (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [63:0] x;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] mask_table1_address0;
reg    mask_table1_ce0;
wire   [51:0] mask_table1_q0;
reg   [63:0] x_read_reg_265;
reg   [63:0] x_read_reg_265_pp0_iter1_reg;
reg   [0:0] p_Result_s_reg_270;
reg   [0:0] p_Result_s_reg_270_pp0_iter1_reg;
reg   [10:0] tmp_V_reg_279;
wire   [51:0] tmp_V_40_fu_83_p1;
reg   [51:0] tmp_V_40_reg_287;
wire   [62:0] tmp_77_fu_102_p1;
reg   [62:0] tmp_77_reg_298;
wire   [0:0] tmp_i_fu_106_p2;
reg   [0:0] tmp_i_reg_303;
wire   [0:0] tmp_i_55_fu_111_p2;
reg   [0:0] tmp_i_55_reg_310;
wire   [63:0] p_Result_55_fu_184_p4;
reg   [63:0] p_Result_55_reg_316;
wire   [0:0] notlhs_i_fu_194_p2;
reg   [0:0] notlhs_i_reg_321;
wire   [0:0] notrhs_i_fu_199_p2;
reg   [0:0] notrhs_i_reg_326;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_3_i_fu_97_p1;
wire   [63:0] p_Val2_s_fu_61_p1;
wire   [5:0] index_V_fu_87_p4;
wire   [63:0] mask_cast_i_fu_116_p1;
wire   [63:0] p_Result_53_fu_120_p3;
wire   [63:0] p_Val2_39_fu_127_p2;
wire   [51:0] tmp_V_42_fu_151_p1;
wire   [10:0] tmp_V_41_fu_141_p4;
wire   [0:0] p_Result_54_fu_133_p3;
wire   [51:0] xs_sig_V_2_fu_155_p3;
wire   [51:0] tmp_4_i_fu_172_p2;
wire   [0:0] xs_sign_V_fu_167_p2;
wire   [10:0] xs_exp_V_fu_161_p3;
wire   [51:0] xs_sig_V_fu_178_p2;
wire   [0:0] sel_tmp2_demorgan_i_fu_211_p2;
wire   [63:0] p_Result_52_fu_204_p3;
wire   [63:0] sel_tmp3_v_i_fu_215_p3;
wire   [0:0] sel_tmp4_i_fu_226_p2;
wire   [0:0] sel_tmp5_i_fu_231_p2;
wire   [63:0] sel_tmp3_i_fu_222_p1;
wire   [0:0] sel_tmp8_i_fu_243_p2;
wire   [0:0] tmp_fu_247_p2;
wire   [0:0] sel_tmp9_i_fu_252_p2;
wire   [63:0] sel_tmp6_i_fu_236_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

floor_mask_table1 #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table1_address0),
    .ce0(mask_table1_ce0),
    .q0(mask_table1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        notlhs_i_reg_321 <= notlhs_i_fu_194_p2;
        notrhs_i_reg_326 <= notrhs_i_fu_199_p2;
        p_Result_55_reg_316 <= p_Result_55_fu_184_p4;
        p_Result_s_reg_270 <= p_Val2_s_fu_61_p1[32'd63];
        p_Result_s_reg_270_pp0_iter1_reg <= p_Result_s_reg_270;
        tmp_77_reg_298 <= tmp_77_fu_102_p1;
        tmp_V_40_reg_287 <= tmp_V_40_fu_83_p1;
        tmp_V_reg_279 <= {{p_Val2_s_fu_61_p1[62:52]}};
        tmp_i_55_reg_310 <= tmp_i_55_fu_111_p2;
        tmp_i_reg_303 <= tmp_i_fu_106_p2;
        x_read_reg_265 <= x;
        x_read_reg_265_pp0_iter1_reg <= x_read_reg_265;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mask_table1_ce0 = 1'b1;
    end else begin
        mask_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((sel_tmp9_i_fu_252_p2[0:0] === 1'b1) ? 64'd13830554455654793216 : sel_tmp6_i_fu_236_p3);

assign index_V_fu_87_p4 = {{p_Val2_s_fu_61_p1[57:52]}};

assign mask_cast_i_fu_116_p1 = mask_table1_q0;

assign mask_table1_address0 = tmp_3_i_fu_97_p1;

assign notlhs_i_fu_194_p2 = ((tmp_V_40_reg_287 != 52'd0) ? 1'b1 : 1'b0);

assign notrhs_i_fu_199_p2 = ((tmp_V_reg_279 != 11'd0) ? 1'b1 : 1'b0);

assign p_Result_52_fu_204_p3 = {{p_Result_s_reg_270_pp0_iter1_reg}, {63'd0}};

assign p_Result_53_fu_120_p3 = {{1'd1}, {tmp_77_reg_298}};

assign p_Result_54_fu_133_p3 = p_Val2_39_fu_127_p2[32'd63];

assign p_Result_55_fu_184_p4 = {{{xs_sign_V_fu_167_p2}, {xs_exp_V_fu_161_p3}}, {xs_sig_V_fu_178_p2}};

assign p_Val2_39_fu_127_p2 = (mask_cast_i_fu_116_p1 + p_Result_53_fu_120_p3);

assign p_Val2_s_fu_61_p1 = x;

assign sel_tmp2_demorgan_i_fu_211_p2 = (tmp_i_reg_303 | tmp_i_55_reg_310);

assign sel_tmp3_i_fu_222_p1 = sel_tmp3_v_i_fu_215_p3;

assign sel_tmp3_v_i_fu_215_p3 = ((sel_tmp2_demorgan_i_fu_211_p2[0:0] === 1'b1) ? p_Result_52_fu_204_p3 : p_Result_55_reg_316);

assign sel_tmp4_i_fu_226_p2 = (tmp_i_reg_303 ^ 1'd1);

assign sel_tmp5_i_fu_231_p2 = (tmp_i_55_reg_310 & sel_tmp4_i_fu_226_p2);

assign sel_tmp6_i_fu_236_p3 = ((sel_tmp5_i_fu_231_p2[0:0] === 1'b1) ? x_read_reg_265_pp0_iter1_reg : sel_tmp3_i_fu_222_p1);

assign sel_tmp8_i_fu_243_p2 = (notrhs_i_reg_326 | notlhs_i_reg_321);

assign sel_tmp9_i_fu_252_p2 = (tmp_i_reg_303 & tmp_fu_247_p2);

assign tmp_3_i_fu_97_p1 = index_V_fu_87_p4;

assign tmp_4_i_fu_172_p2 = (mask_table1_q0 ^ 52'd4503599627370495);

assign tmp_77_fu_102_p1 = p_Val2_s_fu_61_p1[62:0];

assign tmp_V_40_fu_83_p1 = p_Val2_s_fu_61_p1[51:0];

assign tmp_V_41_fu_141_p4 = {{p_Val2_39_fu_127_p2[62:52]}};

assign tmp_V_42_fu_151_p1 = p_Val2_39_fu_127_p2[51:0];

assign tmp_fu_247_p2 = (sel_tmp8_i_fu_243_p2 & p_Result_s_reg_270_pp0_iter1_reg);

assign tmp_i_55_fu_111_p2 = ((tmp_V_reg_279 > 11'd1075) ? 1'b1 : 1'b0);

assign tmp_i_fu_106_p2 = ((tmp_V_reg_279 < 11'd1023) ? 1'b1 : 1'b0);

assign xs_exp_V_fu_161_p3 = ((p_Result_s_reg_270[0:0] === 1'b1) ? tmp_V_41_fu_141_p4 : tmp_V_reg_279);

assign xs_sig_V_2_fu_155_p3 = ((p_Result_s_reg_270[0:0] === 1'b1) ? tmp_V_42_fu_151_p1 : tmp_V_40_reg_287);

assign xs_sig_V_fu_178_p2 = (xs_sig_V_2_fu_155_p3 & tmp_4_i_fu_172_p2);

assign xs_sign_V_fu_167_p2 = (p_Result_s_reg_270 & p_Result_54_fu_133_p3);

endmodule //floor
